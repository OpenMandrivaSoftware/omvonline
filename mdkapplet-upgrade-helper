#!/usr/bin/perl
################################################################################
# Mandriva Online Distribution Upgrade Helper                                  # 
#                                                                              #
# Copyright (C) 2008 Mandriva                                                  #
#                                                                              #
# Thierry Vignaud <tvignaud at mandriva dot com>                               #
#                                                                              #
# This program is free software; you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License Version 2 as            #
# published by the Free Software Foundation.                                   #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program; if not, write to the Free Software                  #
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.   #
################################################################################

use strict;
use POSIX ":sys_wait_h";
use lib qw(/usr/lib/libDrakX);
use standalone; # for explanations
use common;
BEGIN { require_root_capability() }
use run_program;
use feature 'state';

BEGIN { unshift @::textdomains, 'mdkonline' }

use mygtk2 qw(gtknew); #- do not import gtkadd which conflicts with ugtk2 version
use ugtk2 qw(:all);
use lib qw(/usr/lib/libDrakX/drakfirsttime);
use mdkonline;
use Rpmdrake::open_db;


ugtk2::add_icon_path("/usr/share/mdkonline/pixmaps/");
my ($log_file);

my ($new_distro_version, $download_dir);
foreach my $opt (@ARGV) {
    if ($opt =~ /--(rpm-root|urpmi-root)=(.*)/) {
        $::rpmdrake_options{$1}[0] = $2;
    } elsif ($opt =~ /--new_distro_version=(.*)/) {
        $new_distro_version = $1;
    } elsif ($opt =~ /--download-all=(.*)/) {
        $download_dir = $1;
    }

}

my $root = Rpmdrake::open_db::fast_open_urpmi_db()->{root};

my $product_id = common::parse_LDAP_namespace_structure(cat_("$root/etc/product.id"));

if (!$ENV{URPMI_IGNORESIZE}) {
    check_available_free_space('/usr', 800) &&
      check_available_free_space('/var', 800)
	or exit(1);
}

run_program::raw({ detach => 1 }, 'ionice', '-p', $$, '-n7');

upgrade();

my ($refork_gurpmi);

sub check_available_free_space {
    my ($dir, $wanted_MB) = @_;

    my (undef, $free_KB) = MDK::Common::System::df($dir);

    if ($free_KB / 1024 < $wanted_MB) {
	my $msg = ugtk2::escape_text_for_TextView_markup_format(
	    N("Your system does not have enough space left in %s for upgrade (%dMB < %dMB)",
	      $dir,
	      $free_KB / 1024, $wanted_MB));
	ugtk2::ask_warn(N("Error"), $msg);
	0;
    } else {
	1;
    }
}

sub run_gurpmi() {
    my @initial_args = ('--replacefiles', '--clean');
    push @initial_args, "--download-all=$download_dir" if $download_dir;

    while ($refork_gurpmi) {
        
        my $ok = fork_gurpmi(@initial_args);
        if ($refork_gurpmi && !$ok) {
            $refork_gurpmi--;
        } else {
            undef $refork_gurpmi;
        }

        # update media in case mirrors got updated if needed:
        update_media() if $refork_gurpmi;

        if (!$refork_gurpmi) {
            if (!$ok) {
                upgrade_failed();
            } else {
                upgrade_distro_congratulations();
            }
        }
    }
}

my $width = 500;
my @common = (
    # explicitely wrap (for 2008.1):
    line_wrap => 1,
    # workaround infamous 6 years old gnome bug #101968:
    width => $width - 50,
);

sub upgrade_failed() {
    local $mygtk2::left_padding = 0;
    my $w = ugtk2->new(N("Error"));
    gtkadd($w->{window},
           gtknew('VBox', children_tight => [
               get_banner(),
               gtknew('Label_Left', text => N("Installation failed"), @common),
               gtknew('Label_Left', text => N("Installation logs can be found in '%s'", $log_file), @common),
               create_okcancel($w, N("Retry"), N("Cancel")),
           ]),
       );
    $w->{ok}->grab_focus;
    my $answer = $w->main;
    upgrade() if $answer;
}

sub upgrade_distro_congratulations() {
    rm_rf(get_stale_upgrade_filename());

    local $mygtk2::left_padding = 0;
    my $w = ugtk2->new(N("Congratulations"));
    gtkadd($w->{window},
           gtknew('VBox', children_tight => [
               get_banner(),
               gtknew('Label_Left', text => N("Upgrade to Mandriva %s release was successfull.", $new_distro_version),
                      @common),
               gtknew('Label_Left', text => N("You must restart your system."), @common),
               create_okcancel($w, N("Reboot"), N("Cancel")),
           ]),
       );
    $w->{ok}->grab_focus;
    my $answer = $w->main;
    any::reboot() if $answer && !$::testing;
}

sub upgrade() {
    my $xid = gtkroot()->XWINDOW;
    
    run_program::raw({ detach => 1 }, 'xdg-screensaver', 'suspend', $xid);
    my $_w = before_leaving { run_program::raw({ detach => 1 }, 'xdg-screensaver', 'resume', $xid) };
   
    my $file = "$ENV{HOME}/urpmi.cfg.backup." . int(rand 100000);
    log::explanations("backuping urpmi configuration in $file");
    cp_af("$root/etc/urpmi/urpmi.cfg", $file);

    my $urpm = Rpmdrake::open_db::fast_open_urpmi_db();

    my $urpmi_lock = eval {
        local $urpm->{fatal} = sub { die @_ };
        urpm::lock::urpmi_db($urpm, 'exclusive');
    };

    if (my $err = $@) {
        log::explanations(sprintf("locking urpmi database failed: %s"), $err);
        ugtk2::ask_warn(N("Error"),
                        N("Installation failed"),
                        '',
                        formatAlaTeX(N("Packages database is locked. Please close other applications
working with packages database (do you have another media
manager on another desktop, or are you currently installing
packages as well?)."))
                    );
        exit(1);
    }
    undef $urpmi_lock;

    touch(get_stale_upgrade_filename());

    log::explanations("removing all existing urpmi media for upgrade");
    run_program::run('urpmi.removemedia', if_($root, '--urpmi-root', $root), '-a');

    $urpm = Rpmdrake::open_db::fast_open_urpmi_db();
    if ($urpm->{global_config}{downloader}) {
        log::explanations("disabling custom downloader in order to use aria2");
        delete $urpm->{global_config}{downloader};
        urpm::media::write_config($urpm);
    }

    log::explanations("adding urpmi media for new distribution");

    $ENV{URPMI_ADDMEDIA_REASON} = join(',', 'reason=upgrade', 'upgrade_by=mdkapplet', "upgrade_from=$product_id->{version}");
    # the following modifies $MIRRORLIST expansion in urpm/mirrors.pm,
    # it must be set for gurpmi.addmedia, but also for gurpmi
    $ENV{URPMI_ADDMEDIA_PRODUCT_VERSION} = $new_distro_version;

    system('gurpmi.addmedia', '--silent-success', if_($root, "--urpmi-root=$root"), '--distrib', '--mirrorlist', '$MIRRORLIST') and do {
        log::explanations("adding media for new distribution failed");
        rm_rf(get_stale_upgrade_filename());
        log::explanations("restoringing urpmi configuration from $file");
        cp_af($file, "$root/etc/urpmi/urpmi.cfg");
        update_media();
        ugtk2::ask_warn(N("Error"),
                        N("Installation failed"),
                        N("Failure when adding medium"),
                    );
        exit(2);
    };

    log::explanations("upgrading urpmi and rpmdrake");
    log::explanations("upgrading the whole system");
    # rerun gurpmi in case there was an issue (with eg: big transactions:
    $refork_gurpmi = 4;
    {
        # force PATH:
        local $ENV{TMPDIR} = undef;
        $log_file = chomp_(`mktemp -u -p $ENV{HOME}/ gurpmi_upgrade_to_2009.0_XXXXXXXX`) . '.log';
        log::explanations("logging gurpmi message in '$log_file'");
    }
    # we cannot use installUpdates() as MandrivaUpdate needs the media
    # flaged as update (or else, we need to add a new option to MandrivaUpdate):
    run_gurpmi();
}

sub fork_gurpmi {
    run_program::raw({ timeout => 'never' },
		     'gurpmi', '>>', $log_file, '2>>', $log_file, '--auto', '--auto-select',
                      if_($root, "--urpmi-root=$root"), @_);
}

sub update_media() {
    run_program::run('urpmi.update', if_($root, '--urpmi-root', $root), '-a', '--nocheck');
}
